{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noumane agouzil\\\\Desktop\\\\Normane\\\\My projects\\\\PfeProject\\\\Front-End\\\\pages\\\\Auth\\\\Components\\\\captcha.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport firebase from '../../Settings/Components/firebase-config'; // require('firebase/auth')\n\nclass Captcha extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"LoadCaptcha\", () => {\n      firebase.auth().languageCode = 'en';\n      let comp = this;\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha', {\n        'size': 'normal',\n        'callback': function (response) {\n          comp.props.handler(true);\n          console.log(response);\n        },\n        'expired-callback': function () {\n          comp.props.handler(false);\n          console.log(\"expired\");\n        }\n      });\n      window.recaptchaVerifier.render().then(function (WidgetID) {\n        window.recaptchaWidgetId = WidgetID;\n      });\n    });\n\n    this.LoadCaptcha = this.LoadCaptcha.bind(this);\n  }\n\n  componentDidMount() {\n    if (document.readyState === 'complete') {\n      this.LoadCaptcha();\n    } else {\n      window.onload = this.loadRecaptcha;\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      id: \"recaptcha\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Captcha;","map":{"version":3,"sources":["C:/Users/Noumane agouzil/Desktop/Normane/My projects/PfeProject/Front-End/pages/Auth/Components/captcha.js"],"names":["React","firebase","Captcha","Component","constructor","props","auth","languageCode","comp","window","recaptchaVerifier","RecaptchaVerifier","response","handler","console","log","render","then","WidgetID","recaptchaWidgetId","LoadCaptcha","bind","componentDidMount","document","readyState","onload","loadRecaptcha"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,2CAArB,C,CACA;;AACA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;;AAFe,yCAYL,MAAM;AAEhBJ,MAAAA,QAAQ,CAACK,IAAT,GAAgBC,YAAhB,GAA+B,IAA/B;AACA,UAAIC,IAAI,GAAG,IAAX;AACAC,MAAAA,MAAM,CAACC,iBAAP,GAA2B,IAAIT,QAAQ,CAACK,IAAT,CAAcK,iBAAlB,CAAoC,WAApC,EAAiD;AACxE,gBAAQ,QADgE;AAExE,oBAAY,UAAUC,QAAV,EAAoB;AAC5BJ,UAAAA,IAAI,CAACH,KAAL,CAAWQ,OAAX,CAAmB,IAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACH,SALuE;AAMxE,4BAAoB,YAAY;AAC5BJ,UAAAA,IAAI,CAACH,KAAL,CAAWQ,OAAX,CAAmB,KAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEH;AAVuE,OAAjD,CAA3B;AAYAN,MAAAA,MAAM,CAACC,iBAAP,CAAyBM,MAAzB,GAAkCC,IAAlC,CAAuC,UAAUC,QAAV,EAAoB;AACvDT,QAAAA,MAAM,CAACU,iBAAP,GAA2BD,QAA3B;AACH,OAFD;AAGH,KA/BkB;;AAGf,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,QAAQ,CAACC,UAAT,KAAwB,UAA5B,EAAwC;AACpC,WAAKJ,WAAL;AACH,KAFD,MAEO;AACHX,MAAAA,MAAM,CAACgB,MAAP,GAAgB,KAAKC,aAArB;AACH;AACJ;;AAqBDV,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,WADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAOH;;AAzCiC;;AA4CtC,eAAed,OAAf","sourcesContent":["import React from 'react';\r\nimport firebase from '../../Settings/Components/firebase-config'\r\n// require('firebase/auth')\r\nclass Captcha extends React.Component {\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n        this.LoadCaptcha = this.LoadCaptcha.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        if (document.readyState === 'complete') {\r\n            this.LoadCaptcha();\r\n        } else {\r\n            window.onload = this.loadRecaptcha;\r\n        }\r\n    }\r\n    LoadCaptcha = () => {\r\n        \r\n        firebase.auth().languageCode = 'en';\r\n        let comp = this ;\r\n        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha', {\r\n            'size': 'normal',\r\n            'callback': function (response) {\r\n                comp.props.handler(true);\r\n                console.log(response);\r\n            },\r\n            'expired-callback': function () {\r\n                comp.props.handler(false);\r\n                console.log(\"expired\");\r\n                \r\n            }\r\n        });\r\n        window.recaptchaVerifier.render().then(function (WidgetID) {\r\n            window.recaptchaWidgetId = WidgetID ;\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"text-center\">\r\n                <div\r\n                    id=\"recaptcha\"\r\n                ></div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Captcha;"]},"metadata":{},"sourceType":"module"}