{"ast":null,"code":"var __jsx = React.createElement;\nimport { AutoComplete } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/AutoComplete.scss';\nimport '../styles/ant-picker.scss';\n\nconst SearchBar = ({\n  searchItem\n}) => {\n  const {\n    Option\n  } = AutoComplete;\n  const {\n    0: nameOptions,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: Names,\n    1: setNames\n  } = useState([]);\n  const {\n    0: CityOptions,\n    1: setCityOptions\n  } = useState([]);\n  const {\n    0: DomaineOptions,\n    1: setDomaineOptions\n  } = useState([]);\n  const {\n    0: nameText,\n    1: setNametext\n  } = useState(\"\");\n  const {\n    0: domaineText,\n    1: setdomainetext\n  } = useState(\"\");\n  const {\n    0: cityText,\n    1: setcitytext\n  } = useState(\"\");\n\n  const checker = array => {\n    var els = [];\n    array.map(element => element.domaine.map(dom => {\n      els.includes(dom) ? 'null' : els.push(dom);\n    }));\n    return els;\n  };\n\n  const onSearchName = searchText => {\n    setNametext(searchText);\n    const Url = '/api/profiles/search?companyname=' + nameText + '&domaine=' + domaineText + '&city=' + cityText + '&page=1';\n    axios.get(Url).then(({\n      data\n    }) => {\n      if (data !== undefined) {\n        setNames(data.profile);\n\n        if (Names.length !== 0) {\n          setOptions(!searchText ? [] : Names);\n        }\n      }\n    }).catch(err => console.log(err));\n  };\n\n  const onSearchCities = searchText => {\n    setcitytext(searchText);\n    const Url = '/api/profiles/search?companyname=' + nameText + '&domaine=' + domaineText + '&city=' + cityText + '&page=1';\n    axios.get(Url).then(({\n      data\n    }) => {\n      if (data !== undefined) {\n        setNames(data.profile);\n\n        if (Names.length !== 0) {\n          setCityOptions(!searchText ? [] : Names.filter(em => em.city.includes(searchText.toLowerCase())));\n        }\n      }\n    }).catch(err => console.log(err));\n  };\n\n  const onSelectName = data => {\n    setNametext(data);\n  };\n\n  const onSelectDomaine = data => {\n    setdomainetext(data);\n  };\n\n  const onSelectCity = data => {\n    setcitytext(data);\n  };\n\n  const onSearchDomaine = searchText => {\n    setdomainetext(searchText);\n    const Url = '/api/profiles/search?companyname=' + nameText + '&domaine=' + domaineText + '&city=' + cityText + '&page=1';\n    axios.get(Url).then(({\n      data\n    }) => {\n      if (data !== undefined) {\n        setNames(data.profile);\n\n        if (Names.length !== 0) {\n          setDomaineOptions(!searchText ? [] : checker(Names));\n        }\n      }\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    if (searchItem !== undefined) {\n      setNametext(searchItem.companyname);\n      setdomainetext(searchItem.domaine);\n      setcitytext(searchItem.city);\n    }\n  }, []);\n  return __jsx(\"div\", {\n    className: \"search_Container\"\n  }, __jsx(\"div\", {\n    className: \"inputContainer\"\n  }, __jsx(\"i\", {\n    \"aria-hidden\": true,\n    className: \"fa fa-id-card icon\"\n  }), __jsx(AutoComplete, {\n    className: \"searchInput\",\n    onSelect: onSelectName,\n    onSearch: onSearchName,\n    value: nameText,\n    placeholder: \"Soci\\xE9t\\xE9/Personne\"\n  }, nameOptions.map(name => __jsx(Option, {\n    key: name.companyname,\n    value: name.companyname\n  }, name.companyname)))), __jsx(\"div\", {\n    className: \"inputContainer\"\n  }, __jsx(\"i\", {\n    \"aria-hidden\": true,\n    className: \"fa fa-globe icon\"\n  }), __jsx(AutoComplete, {\n    className: \"searchInput\",\n    value: domaineText,\n    onSelect: onSelectDomaine,\n    onSearch: onSearchDomaine,\n    placeholder: \"Domaine\"\n  }, DomaineOptions.map(domaine => __jsx(Option, {\n    key: domaine,\n    value: domaine\n  }, domaine)))), __jsx(\"div\", {\n    className: \"inputContainer\"\n  }, __jsx(\"i\", {\n    \"aria-hidden\": true,\n    className: \"fa fa-map-marker icon\"\n  }), __jsx(AutoComplete, {\n    className: \"searchInput\",\n    onSelect: onSelectCity,\n    onSearch: onSearchCities,\n    placeholder: \"Ville\",\n    value: cityText\n  }, CityOptions.map(element => __jsx(Option, {\n    key: element.city,\n    value: element.city\n  }, element.city)))), __jsx(\"a\", {\n    className: \"searchButton\",\n    type: \"button\",\n    href: '/Search?companyname=' + nameText + '&domaine=' + domaineText + '&city=' + cityText + '&page=1'\n  }, __jsx(\"i\", {\n    \"aria-hidden\": true,\n    className: \"fa fa-search\"\n  })));\n};\n\nexport default SearchBar;","map":null,"metadata":{},"sourceType":"module"}