{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Modal from 'antd/lib/modal/Modal';\nimport { useState } from 'react';\nimport moment from 'moment';\nimport { Button, notification } from 'antd';\nimport axios from 'axios';\nimport '../../Sass/calendar.scss';\n\nconst BusyComponent = ({\n  day,\n  hour,\n  setTitle,\n  setvisible\n}) => {\n  const DateDivider = (string, hour) => {\n    const date = new Date(string);\n    const dateNow = new Date();\n    const moment1 = moment(date);\n\n    if (date.getDay() === 0) {\n      return 1;\n    }\n\n    if (moment1.isSame(dateNow, 'year') && moment1.isSame(dateNow, 'day') && moment1.isSame(dateNow, 'month')) {\n      const Hourdiff = dateNow.getHours() - parseInt(hour.split(\":\")[0]);\n      return Hourdiff;\n    }\n\n    if (moment1.isBefore(dateNow)) {\n      return 1;\n    }\n\n    return -1;\n  };\n\n  const res = DateDivider(day, hour);\n  return __jsx(React.Fragment, null, res >= 0 ? __jsx(\"div\", {\n    className: \"Busy\",\n    title: \"Date indisponible\"\n  }) : __jsx(\"div\", {\n    onClick: setTitle === false ? null : () => {\n      setTitle(hour + \" | \" + day);\n      setvisible(true);\n    },\n    className: setTitle === false ? \"FreeProfile\" : \"Free\"\n  }));\n};\n\nconst Scheduler = (StartHour, endtHour, length) => {\n  const results = [];\n\n  for (let i = 0; i <= parseInt(length); i++) {\n    const string = StartHour.format('HH:mm') + \"-\" + StartHour.add(30, 'minutes').format('HH:mm'); // Break betweeen meetings\n\n    results.push(string);\n\n    if (Math.abs(moment.duration(StartHour.diff(endtHour)).asMinutes()) <= 30) {\n      break;\n    }\n\n    StartHour.add(15, 'minutes');\n  }\n\n  return results;\n};\n\nconst DatePicker = string => {\n  const day = new Date(string);\n  const Days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n  const Months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Aout', 'Septembre', 'Octobre', 'Novembre', 'Decembre'];\n  const DisplayString = [Days[day.getDay()], day.getDate(), Months[day.getMonth()]];\n  return DisplayString;\n};\n\nconst Checker = (profile, hour, day) => {\n  const element = profile.Notification.filter(el => el.day == day && el.horraire == hour);\n\n  if (element[0] !== undefined) {\n    return element[0].AcceptStatus;\n  } else {\n    return '';\n  }\n};\n\nconst calendar = ({\n  profile,\n  loc\n}) => {\n  //Data from database \n  const Horraire = profile.horraire;\n  var Booked = profile.booked !== undefined ? profile.booked : {}; // Horraires ----------------------\n\n  const StartHour = moment(Horraire[0], \"HH:mm\");\n  const endtHour = moment(Horraire[1], \"HH:mm\");\n  const length = (endtHour.format(\"HH\") - StartHour.format(\"HH\")) * 60 / 45;\n  const results = Scheduler(StartHour, endtHour, length); // States -------------------\n\n  const {\n    0: BookedDisplay,\n    1: setDisplay\n  } = useState(Booked !== {} ? Booked : {\n    \"\": \"\"\n  });\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: bookedVisible,\n    1: setbookedVisible\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState();\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setloading\n  } = useState(false);\n  const {\n    0: week,\n    1: setWeek\n  } = useState(0); // Days ---------------------------\n\n  const datePusher = new Date();\n  const dayResult = [moment(Date.now()).add(7 * week, 'days').format('YYYY/MM/DD')];\n  datePusher.setDate(datePusher.getDate() + week * 7);\n\n  for (let i = 0; i < 6; i++) {\n    datePusher.setDate(datePusher.getDate() + 1);\n    dayResult.push(moment(datePusher).format('YYYY/MM/DD'));\n  } // -------------------------------------\n  // Handlers ---------------------------------\n\n\n  const handleSave = async () => {\n    if (Booked[title.split(\" | \")[1]] !== undefined) {\n      Booked[title.split(\" | \")[1]].push(title.split(\" | \")[0]);\n    } else {\n      const key = [title.split(\" | \")[1]];\n      const value = title.split(\" | \")[0];\n      Booked === {\n        \"\": \"\"\n      } ? Booked = {\n        [key[0]]: [value]\n      } : Booked = _objectSpread(_objectSpread({}, Booked), {}, {\n        [key[0]]: [value]\n      });\n    }\n\n    setloading(true);\n    const Data = {\n      booked: Booked,\n      Notification: {\n        Type: \"Request\",\n        Message: message,\n        horraire: title.split(\" | \")[0],\n        day: title.split(\" | \")[1]\n      }\n    };\n    axios.post('http://localhost:9000/profiles/bookmeeting?userid=' + profile._id, Data, {\n      withCredentials: true\n    }).then(data => {\n      setDisplay(Booked);\n      notification['success']({\n        message: 'Votre demande a été envoyée avec succès',\n        description: 'Nous vous informerons lorsque nous aurons une réponse'\n      });\n      setTimeout(() => {\n        setloading(false);\n        setvisible(false);\n        window.location.reload();\n      }, 2000);\n    }).catch(err => console.log(err));\n  };\n\n  const activeDay = day => {\n    if (moment(day).diff(moment(Date.now()), 'hours') > -24 && moment(day).diff(moment(Date.now()), 'hours') <= 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // -----------------------------------\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"CalendarControllers\"\n  }, __jsx(\"button\", {\n    className: \"today\",\n    onClick: () => setWeek(0)\n  }, \"Aujourd'hui\"), __jsx(\"div\", {\n    className: \"weeks\"\n  }, __jsx(\"button\", {\n    className: \"nextW\",\n    onClick: () => setWeek(week - 1)\n  }, \"Semaine pr\\xE9c\\xE9dente\"), __jsx(\"button\", {\n    className: \"prevW\",\n    onClick: () => setWeek(week + 1)\n  }, \"Prochaine semaine\"))), __jsx(\"table\", {\n    id: \"calendar\"\n  }, __jsx(Modal, {\n    title: title,\n    visible: visible,\n    width: \"50vw\",\n    onCancel: () => setvisible(false),\n    bodyStyle: {\n      height: '100%'\n    },\n    footer: [__jsx(Button, {\n      disabled: false,\n      key: \"submit\",\n      type: \"primary\",\n      loading: loading,\n      style: {\n        borderRadius: '10px',\n        fontFamily: 'GlacialBold'\n      },\n      onClick: handleSave\n    }, \"Envoyer\")]\n  }, __jsx(\"label\", {\n    style: {\n      color: '#2a2a2a',\n      fontFamily: 'GlacialBold',\n      fontSize: '16px'\n    }\n  }, \"Message\"), __jsx(\"br\", null), __jsx(\"textarea\", {\n    className: \"textArea\",\n    placeholder: \"D\\xE9crivez votre objectif de la r\\xE9union\",\n    rows: \"4\",\n    value: message,\n    onChange: e => setMessage(e.target.value)\n  }), __jsx(\"br\", null), __jsx(\"br\", null)), __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null), dayResult.map(day => __jsx(\"th\", {\n    key: day + Date.now(),\n    style: activeDay(day) ? {\n      color: '#1a73e8',\n      textAlign: \"center\"\n    } : {\n      textAlign: \"center\"\n    }\n  }, DatePicker(day)[0], \" \", __jsx(\"br\", null), \" \", DatePicker(day)[1], \" \", DatePicker(day)[2], \" \")))), __jsx(\"tbody\", null, loc === \"public\" && __jsx(React.Fragment, null, results.map(hour => __jsx(\"tr\", {\n    key: hour + Date.now()\n  }, __jsx(\"th\", null, hour), dayResult.map(day => __jsx(\"td\", {\n    key: day + hour\n  }, BookedDisplay[day] !== undefined && (BookedDisplay[day].includes(hour) ? Checker(profile, hour, day) === true ? __jsx(\"div\", {\n    className: \"Booked\"\n  }, \"R\\xE9serv\\xE9e\") : Checker(profile, hour, day) === false ? __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: setTitle,\n    setvisible: setvisible\n  }) : __jsx(\"div\", {\n    className: \"Pending\"\n  }, \"En attente\") : __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: setTitle,\n    setvisible: setvisible\n  })), BookedDisplay[day] === undefined && __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: setTitle,\n    setvisible: setvisible\n  })))))), loc === \"profile\" && __jsx(React.Fragment, null, results.map(hour => __jsx(\"tr\", {\n    key: hour + Date.now()\n  }, __jsx(\"th\", null, hour), dayResult.map(day => __jsx(\"td\", {\n    key: day + hour\n  }, BookedDisplay[day] !== undefined && (BookedDisplay[day].includes(hour) ? Checker(profile, hour, day) === true ? __jsx(\"div\", {\n    className: \"Booked\"\n  }, \"R\\xE9serv\\xE9e\") : Checker(profile, hour, day) === false ? __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: false,\n    setvisible: false\n  }) : __jsx(\"div\", {\n    className: \"Pending\"\n  }, \"En attente\") : __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: false,\n    setvisible: false\n  })), BookedDisplay[day] === undefined && __jsx(BusyComponent, {\n    day: day,\n    hour: hour.toString(),\n    setTitle: false,\n    setvisible: false\n  })))))))));\n};\n\nexport default calendar;","map":null,"metadata":{},"sourceType":"module"}