{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Modal from 'antd/lib/modal/Modal';\nimport { useState } from 'react';\nimport moment from 'moment';\nimport { Button, notification } from 'antd';\nimport axios from 'axios';\nimport '../../../pages/Profiles/Sass/calendar.scss';\n\nvar BusyComponent = function BusyComponent(_ref) {\n  var day = _ref.day,\n      hour = _ref.hour,\n      setTitle = _ref.setTitle,\n      setvisible = _ref.setvisible;\n\n  var DateDivider = function DateDivider(string, hour) {\n    var date = new Date(string);\n    var dateNow = new Date();\n    var moment1 = moment(date);\n\n    if (date.getDay() === 0) {\n      return 1;\n    }\n\n    if (moment1.isSame(dateNow, 'year') && moment1.isSame(dateNow, 'day') && moment1.isSame(dateNow, 'month')) {\n      var Hourdiff = dateNow.getHours() - parseInt(hour.split(\":\")[0]);\n      return Hourdiff;\n    }\n\n    if (moment1.isBefore(dateNow)) {\n      return 1;\n    }\n\n    return -1;\n  };\n\n  var res = DateDivider(day, hour);\n  return __jsx(React.Fragment, null, res >= 0 ? __jsx(\"div\", {\n    className: \"Busy\",\n    title: \"Date indisponible\"\n  }) : __jsx(\"div\", {\n    onClick: setTitle === false ? null : function () {\n      setTitle(hour + \" | \" + day);\n      setvisible(true);\n    },\n    className: setTitle === false ? \"FreeProfile\" : \"Free\"\n  }));\n};\n\nvar Scheduler = function Scheduler(StartHour, endtHour, length) {\n  var results = [];\n\n  for (var i = 0; i <= parseInt(length); i++) {\n    var string = StartHour.format('HH:mm') + \"-\" + StartHour.add(30, 'minutes').format('HH:mm'); // Break betweeen meetings\n\n    results.push(string);\n\n    if (Math.abs(moment.duration(StartHour.diff(endtHour)).asMinutes()) <= 30) {\n      break;\n    }\n\n    StartHour.add(15, 'minutes');\n  }\n\n  return results;\n};\n\nvar DatePicker = function DatePicker(string) {\n  var day = new Date(string);\n  var Days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n  var Months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Aout', 'Septembre', 'Octobre', 'Novembre', 'Decembre'];\n  var DisplayString = [Days[day.getDay()], day.getDate(), Months[day.getMonth()]];\n  return DisplayString;\n};\n\nvar Checker = function Checker(profile, hour, day) {\n  var element = profile.Notification.filter(function (el) {\n    return el.day == day && el.horraire == hour;\n  });\n\n  if (element[0] !== undefined) {\n    return element[0].AcceptStatus;\n  } else {\n    return '';\n  }\n};\n\nvar calendar = function calendar(_ref2) {\n  var profile = _ref2.profile,\n      loc = _ref2.loc;\n  //Data from database \n  var Horraire = profile.horraire;\n  var Booked = profile.booked !== undefined ? profile.booked : {}; // Horraires ----------------------\n\n  var StartHour = moment(Horraire[0], \"HH:mm\");\n  var endtHour = moment(Horraire[1], \"HH:mm\");\n  var length = (endtHour.format(\"HH\") - StartHour.format(\"HH\")) * 60 / 45;\n  var results = Scheduler(StartHour, endtHour, length); // States -------------------\n\n  var _useState = useState(Booked !== {} ? Booked : {\n    \"\": \"\"\n  }),\n      BookedDisplay = _useState[0],\n      setDisplay = _useState[1];\n\n  var _useState2 = useState(false),\n      visible = _useState2[0],\n      setvisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      bookedVisible = _useState3[0],\n      setbookedVisible = _useState3[1];\n\n  var _useState4 = useState(),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      message = _useState5[0],\n      setMessage = _useState5[1];\n\n  var _useState6 = useState(false),\n      loading = _useState6[0],\n      setloading = _useState6[1];\n\n  var _useState7 = useState(0),\n      week = _useState7[0],\n      setWeek = _useState7[1]; // Days ---------------------------\n\n\n  var datePusher = new Date();\n  var dayResult = [moment(Date.now()).add(7 * week, 'days').format('YYYY/MM/DD')];\n  datePusher.setDate(datePusher.getDate() + week * 7);\n\n  for (var i = 0; i < 6; i++) {\n    datePusher.setDate(datePusher.getDate() + 1);\n    dayResult.push(moment(datePusher).format('YYYY/MM/DD'));\n  } // -------------------------------------\n  // Handlers ---------------------------------\n\n\n  var handleSave = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var key, value, Data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Booked[title.split(\" | \")[1]] !== undefined) {\n                Booked[title.split(\" | \")[1]].push(title.split(\" | \")[0]);\n              } else {\n                key = [title.split(\" | \")[1]];\n                value = title.split(\" | \")[0];\n                Booked === {\n                  \"\": \"\"\n                } ? Booked = _defineProperty({}, key[0], [value]) : Booked = _objectSpread(_objectSpread({}, Booked), {}, _defineProperty({}, key[0], [value]));\n              }\n\n              setloading(true);\n              Data = {\n                booked: Booked,\n                Notification: {\n                  Type: \"Request\",\n                  Message: message,\n                  horraire: title.split(\" | \")[0],\n                  day: title.split(\" | \")[1]\n                }\n              };\n              axios.post('/api/profiles/bookmeeting?userid=' + profile._id, Data, {\n                withCredentials: true\n              }).then(function (data) {\n                setDisplay(Booked);\n                notification['success']({\n                  message: 'Votre demande a été envoyée avec succès',\n                  description: 'Nous vous informerons lorsque nous aurons une réponse'\n                });\n                setTimeout(function () {\n                  setloading(false);\n                  setvisible(false);\n                  window.location.reload();\n                }, 2000);\n              })[\"catch\"](function (err) {\n                return console.log(err);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSave() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var activeDay = function activeDay(day) {\n    if (moment(day).diff(moment(Date.now()), 'hours') > -24 && moment(day).diff(moment(Date.now()), 'hours') <= 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // -----------------------------------\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"CalendarControllers\"\n  }, __jsx(\"button\", {\n    className: \"today\",\n    onClick: function onClick() {\n      return setWeek(0);\n    }\n  }, \"Aujourd'hui\"), __jsx(\"div\", {\n    className: \"weeks\"\n  }, __jsx(\"button\", {\n    className: \"nextW\",\n    onClick: function onClick() {\n      return setWeek(week - 1);\n    }\n  }, \"Semaine pr\\xE9c\\xE9dente\"), __jsx(\"button\", {\n    className: \"prevW\",\n    onClick: function onClick() {\n      return setWeek(week + 1);\n    }\n  }, \"Prochaine semaine\"))), __jsx(\"table\", {\n    id: \"calendar\"\n  }, __jsx(Modal, {\n    title: title,\n    visible: visible,\n    width: \"50vw\",\n    onCancel: function onCancel() {\n      return setvisible(false);\n    },\n    bodyStyle: {\n      height: '100%'\n    },\n    footer: [__jsx(Button, {\n      disabled: false,\n      key: \"submit\",\n      type: \"primary\",\n      loading: loading,\n      style: {\n        borderRadius: '10px',\n        fontFamily: 'GlacialBold'\n      },\n      onClick: handleSave\n    }, \"Envoyer\")]\n  }, __jsx(\"label\", {\n    style: {\n      color: '#2a2a2a',\n      fontFamily: 'GlacialBold',\n      fontSize: '16px'\n    }\n  }, \"Message\"), __jsx(\"br\", null), __jsx(\"textarea\", {\n    className: \"textArea\",\n    placeholder: \"D\\xE9crivez votre objectif de la r\\xE9union\",\n    rows: \"4\",\n    value: message,\n    onChange: function onChange(e) {\n      return setMessage(e.target.value);\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null)), __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null), dayResult.map(function (day) {\n    return __jsx(\"th\", {\n      key: day + Date.now(),\n      style: activeDay(day) ? {\n        color: '#1a73e8',\n        textAlign: \"center\"\n      } : {\n        textAlign: \"center\"\n      }\n    }, DatePicker(day)[0], \" \", __jsx(\"br\", null), \" \", DatePicker(day)[1], \" \", DatePicker(day)[2], \" \");\n  }))), __jsx(\"tbody\", null, loc === \"public\" && __jsx(React.Fragment, null, results.map(function (hour) {\n    return __jsx(\"tr\", {\n      key: hour + Date.now()\n    }, __jsx(\"th\", null, hour), dayResult.map(function (day) {\n      return __jsx(\"td\", {\n        key: day + hour\n      }, BookedDisplay[day] !== undefined && (BookedDisplay[day].includes(hour) ? Checker(profile, hour, day) === true ? __jsx(\"div\", {\n        className: \"Booked\"\n      }, \"R\\xE9serv\\xE9e\") : Checker(profile, hour, day) === false ? __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: setTitle,\n        setvisible: setvisible\n      }) : __jsx(\"div\", {\n        className: \"Pending\"\n      }, \"En attente\") : __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: setTitle,\n        setvisible: setvisible\n      })), BookedDisplay[day] === undefined && __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: setTitle,\n        setvisible: setvisible\n      }));\n    }));\n  })), loc === \"profile\" && __jsx(React.Fragment, null, results.map(function (hour) {\n    return __jsx(\"tr\", {\n      key: hour + Date.now()\n    }, __jsx(\"th\", null, hour), dayResult.map(function (day) {\n      return __jsx(\"td\", {\n        key: day + hour\n      }, BookedDisplay[day] !== undefined && (BookedDisplay[day].includes(hour) ? Checker(profile, hour, day) === true ? __jsx(\"div\", {\n        className: \"Booked\"\n      }, \"R\\xE9serv\\xE9e\") : Checker(profile, hour, day) === false ? __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: false,\n        setvisible: false\n      }) : __jsx(\"div\", {\n        className: \"Pending\"\n      }, \"En attente\") : __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: false,\n        setvisible: false\n      })), BookedDisplay[day] === undefined && __jsx(BusyComponent, {\n        day: day,\n        hour: hour.toString(),\n        setTitle: false,\n        setvisible: false\n      }));\n    }));\n  })))));\n};\n\nexport default calendar;","map":null,"metadata":{},"sourceType":"module"}