{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noumane agouzil\\\\Desktop\\\\Normane\\\\My projects\\\\PfeProject\\\\Front-End\\\\pages\\\\test\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport { ViewState } from '@devexpress/dx-react-scheduler';\nimport { Scheduler, WeekView, DayView, Appointments, Toolbar, DateNavigator, ViewSwitcher, AppointmentForm, AppointmentTooltip, TodayButton } from '@devexpress/dx-react-scheduler-material-ui';\nconst URL = 'https://js.devexpress.com/Demos/Mvc/api/SchedulerData/Get';\n\nconst makeQueryString = (currentDate, currentViewName) => {\n  const format = 'YYYY-MM-DDTHH:mm:ss';\n  const start = moment(currentDate).startOf(currentViewName.toLowerCase());\n  const end = start.clone().endOf(currentViewName.toLowerCase());\n  return encodeURI(`${URL}?filter=[[\"EndDate\", \">\", \"${start.format(format)}\"],[\"StartDate\", \"<\", \"${end.format(format)}\"]]`);\n};\n\nconst mapAppointmentData = appointment => _objectSpread(_objectSpread({}, appointment), {}, {\n  startDate: appointment.StartDate,\n  endDate: appointment.EndDate,\n  title: appointment.Text\n});\n\nconst date = new Date();\nexport default class Demo extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    var string = '\"' + date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate() + '\"';\n    console.log(string);\n    this.state = {\n      loading: true,\n      currentDate: string,\n      currentViewName: 'Day'\n    };\n    this.loadData = this.loadData.bind(this);\n\n    this.currentViewNameChange = currentViewName => {\n      this.setState({\n        currentViewName,\n        loading: true\n      });\n    };\n\n    this.currentDateChange = currentDate => {\n      this.setState({\n        currentDate,\n        loading: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate() {\n    this.loadData();\n  }\n\n  loadData() {\n    const {\n      currentDate,\n      currentViewName\n    } = this.state;\n    const queryString = makeQueryString(currentDate, currentViewName);\n\n    if (queryString === this.lastQuery) {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    fetch(queryString).then(response => response.json()).then(({\n      data\n    }) => {\n      setTimeout(() => {\n        this.setState({\n          data,\n          loading: false\n        });\n      }, 600);\n    }).catch(() => this.setState({\n      loading: false\n    }));\n    this.lastQuery = queryString;\n  }\n\n  render() {\n    const {\n      data,\n      loading,\n      currentDate,\n      currentViewName\n    } = this.state;\n    const formattedData = data ? data.map(mapAppointmentData) : [];\n    return __jsx(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, __jsx(Scheduler, {\n      data: formattedData,\n      height: 660,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, __jsx(ViewState, {\n      defaultCurrentDate: \"2018-07-25\",\n      defaultCurrentViewName: \"Week\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), __jsx(DayView, {\n      startDayHour: 9,\n      endDayHour: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), __jsx(WeekView, {\n      startDayHour: 10,\n      endDayHour: 19,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }), __jsx(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), __jsx(ViewSwitcher, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }), __jsx(Appointments, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Noumane agouzil/Desktop/Normane/My projects/PfeProject/Front-End/pages/test/index.js"],"names":["React","Paper","LinearProgress","withStyles","moment","ViewState","Scheduler","WeekView","DayView","Appointments","Toolbar","DateNavigator","ViewSwitcher","AppointmentForm","AppointmentTooltip","TodayButton","URL","makeQueryString","currentDate","currentViewName","format","start","startOf","toLowerCase","end","clone","endOf","encodeURI","mapAppointmentData","appointment","startDate","StartDate","endDate","EndDate","title","Text","date","Date","Demo","PureComponent","constructor","props","string","getFullYear","getMonth","getDate","console","log","state","loading","loadData","bind","currentViewNameChange","setState","currentDateChange","componentDidMount","componentDidUpdate","queryString","lastQuery","fetch","then","response","json","data","setTimeout","catch","render","formattedData","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport {\r\n  ViewState,\r\n} from '@devexpress/dx-react-scheduler';\r\nimport {\r\n  Scheduler,\r\n  WeekView,\r\n  DayView,\r\n  Appointments,\r\n  Toolbar,\r\n  DateNavigator,\r\n  ViewSwitcher,\r\n  AppointmentForm,\r\n  AppointmentTooltip,\r\n  TodayButton,\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\n\r\nconst URL = 'https://js.devexpress.com/Demos/Mvc/api/SchedulerData/Get';\r\n\r\nconst makeQueryString = (currentDate, currentViewName) => {\r\n  const format = 'YYYY-MM-DDTHH:mm:ss';\r\n  const start = moment(currentDate).startOf(currentViewName.toLowerCase());\r\n  const end = start.clone().endOf(currentViewName.toLowerCase());\r\n  return encodeURI(`${URL}?filter=[[\"EndDate\", \">\", \"${start.format(format)}\"],[\"StartDate\", \"<\", \"${end.format(format)}\"]]`);\r\n};\r\n\r\n\r\nconst mapAppointmentData = appointment => ({\r\n  ...appointment,\r\n  startDate: appointment.StartDate,\r\n  endDate: appointment.EndDate,\r\n  title: appointment.Text,\r\n});\r\nconst date = new Date();\r\nexport default class Demo extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    var string = '\"'+date.getFullYear()+'-'+date.getMonth() + '-'+date.getDate() +'\"' ;\r\n    console.log(string);\r\n    this.state = {\r\n      loading: true,\r\n      currentDate: string,\r\n      currentViewName: 'Day',\r\n    };\r\n    this.loadData = this.loadData.bind(this);\r\n    this.currentViewNameChange = (currentViewName) => {\r\n      this.setState({ currentViewName, loading: true });\r\n    };\r\n    this.currentDateChange = (currentDate) => {\r\n      this.setState({ currentDate, loading: true });\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    const { currentDate, currentViewName } = this.state;\r\n    const queryString = makeQueryString(currentDate, currentViewName);\r\n    if (queryString === this.lastQuery) {\r\n      this.setState({ loading: false });\r\n      return;\r\n    }\r\n    fetch(queryString)\r\n      .then(response => response.json())\r\n      .then(({ data }) => {\r\n        setTimeout(() => {\r\n          this.setState({\r\n            data,\r\n            loading: false,\r\n          });\r\n        }, 600);\r\n      })\r\n      .catch(() => this.setState({ loading: false }));\r\n    this.lastQuery = queryString;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      data, loading,\r\n      currentDate, currentViewName,\r\n    } = this.state;\r\n\r\n    const formattedData = data\r\n      ? data.map(mapAppointmentData) : [];\r\n\r\n    return (\r\n          <Paper>\r\n          <Scheduler\r\n            data={formattedData}\r\n            height={660}\r\n          >\r\n            <ViewState\r\n              defaultCurrentDate=\"2018-07-25\"\r\n              defaultCurrentViewName=\"Week\"\r\n            />\r\n\r\n            <DayView\r\n              startDayHour={9}\r\n              endDayHour={18}\r\n            />\r\n            <WeekView\r\n              startDayHour={10}\r\n              endDayHour={19}\r\n            />\r\n\r\n            <Toolbar />\r\n            <ViewSwitcher />\r\n            <Appointments />\r\n          </Scheduler>\r\n        </Paper>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}