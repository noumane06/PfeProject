{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from '../../components/head';\nimport Header from '../../components/header';\nimport { useState, useEffect, forwardRef } from 'react';\nimport { Spin } from 'antd';\nimport PublicProfile from './Components/publicProfile';\nimport ErrorPage from 'next/error';\nimport Footer from '../../components/footer';\n\nconst Profile = props => {\n  const {\n    0: userid,\n    1: setData\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    if (props.statusCode === 401) {\n      const location = \"/Auth/Signin/?ref=tokenexpired&location=\" + window.location.href;\n      window.location.replace(location);\n    } else {\n      props.statusCode !== 404 ? setData(props.data.AuthId.userId) : \"\";\n      setLoading(false);\n    }\n  }, []);\n\n  if (props.statusCode === 404) {\n    return __jsx(ErrorPage, {\n      statusCode: props.statusCode\n    });\n  }\n\n  if (loading) {\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      title: \"Loading\"\n    }), __jsx(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        marginTop: '-50px',\n        marginLeft: '-50px'\n      }\n    }, __jsx(Spin, {\n      size: \"large\"\n    })));\n  } else {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"body\"\n    }, __jsx(\"div\", {\n      className: \"ContentInside\"\n    }, __jsx(Header, null), props.data === undefined ? __jsx(Head, {\n      title: \"Loading\"\n    }) : '', __jsx(\"div\", {\n      style: {\n        marginTop: '8%'\n      }\n    }, props.data !== undefined && __jsx(PublicProfile, {\n      profile: props.data.profile,\n      userid: userid\n    })))), __jsx(Footer, null));\n  }\n};\n\nexport const getServerSideProps = async ctx => {\n  try {\n    const cookie = ctx.req.headers.cookie;\n    const url = \"http://15.237.56.214:9000/profiles/profile?userid=\" + ctx.query._id;\n    const res = await fetch(url, {\n      headers: {\n        cookie\n      }\n    });\n    const statusCode = res.status;\n    const data = await res.json();\n\n    if (statusCode !== 200) {\n      throw statusCode;\n    }\n\n    return {\n      props: {\n        data\n      }\n    };\n  } catch (error) {\n    ctx.res.statusCode = error;\n    return {\n      props: {\n        statusCode: error\n      }\n    };\n  }\n};\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}