{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport firebase from '../firebase-config';\n\nrequire('firebase/auth');\n\nvar Captcha = /*#__PURE__*/function (_React$Component) {\n  _inherits(Captcha, _React$Component);\n\n  var _super = _createSuper(Captcha);\n\n  function Captcha(props) {\n    var _this;\n\n    _classCallCheck(this, Captcha);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"LoadCaptcha\", function () {\n      firebase.auth().languageCode = 'en';\n\n      var comp = _assertThisInitialized(_this);\n\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha', {\n        'size': 'normal',\n        'callback': function callback(response) {\n          comp.props.handler(true);\n        },\n        'expired-callback': function expiredCallback() {\n          comp.props.handler(false);\n          console.log(\"expired\");\n        }\n      });\n      window.recaptchaVerifier.render().then(function (WidgetID) {\n        window.recaptchaWidgetId = WidgetID;\n      });\n    });\n\n    _this.LoadCaptcha = _this.LoadCaptcha.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Captcha, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (document.readyState === 'complete') {\n        this.LoadCaptcha();\n      } else {\n        window.onload = this.loadRecaptcha;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"text-center\"\n      }, __jsx(\"div\", {\n        id: \"recaptcha\"\n      }));\n    }\n  }]);\n\n  return Captcha;\n}(React.Component);\n\nexport default Captcha;","map":null,"metadata":{},"sourceType":"module"}