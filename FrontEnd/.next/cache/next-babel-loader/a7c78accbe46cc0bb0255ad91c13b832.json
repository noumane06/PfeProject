{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport { message, Select, TimePicker, Spin, notification } from 'antd';\nimport axios from 'axios';\nimport Captcha from './captcha';\nimport firebase from '../firebase-config';\nimport '../../styles/AutoComplete.scss';\nimport Cities from '../Data/Cities';\nimport Jobs from '../Data/Jobs';\nimport Fields from '../Data/Fields';\nimport Modal from 'antd/lib/modal/Modal';\nimport Terms from './terms';\nimport Privacy from './privacy';\n\nconst FormComponent = props => {\n  const {\n    RangePicker\n  } = TimePicker;\n  const {\n    Option\n  } = Select;\n  const children = [];\n  Fields.map(Field => {\n    children.push(__jsx(Option, {\n      key: Field\n    }, Field));\n  });\n  var data = {\n    // type must be either 'Société' or 'Client' , if you chnage the values be sure to change it in backend too\n    type: \"Société\",\n    email: \"\",\n    password: \"\",\n    nom: \"\",\n    prenom: \"\",\n    companyname: \"\",\n    title: \"Directeur\",\n    domaine: [],\n    addresse: \"\",\n    city: \"Casablanca\",\n    mobilephone: \"\",\n    fixphone: \"\",\n    gender: \"male\",\n    horraire: []\n  }; // States ---------------------------------------\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: captchaState,\n    1: setCaptcha\n  } = useState(false);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(0);\n  const {\n    0: userData,\n    1: setData\n  } = useState(data);\n  const {\n    0: privacy,\n    1: setPrivacy\n  } = useState(false);\n  const {\n    0: terms,\n    1: setTerms\n  } = useState(false); // errors ---------------------------------------\n\n  const {\n    0: emailErr,\n    1: setErrEm\n  } = useState(false);\n  const {\n    0: passwordErr,\n    1: setErrPass\n  } = useState(false);\n  const {\n    0: confirmpass,\n    1: setErrConf\n  } = useState(false);\n  const {\n    0: domaineErr,\n    1: setErrdom\n  } = useState(false);\n  const {\n    0: horraireErr,\n    1: setErrhor\n  } = useState(false);\n  const {\n    0: codeErr,\n    1: setCodeErr\n  } = useState(false);\n  const {\n    0: phoneErr,\n    1: setPhoneErr\n  } = useState(false); // password confirmation\n\n  const {\n    0: Confirmation,\n    1: setConf\n  } = useState(\"\"); // phone number confirmation\n\n  const {\n    0: codeVerif,\n    1: setCode\n  } = useState(\"\");\n  const {\n    0: checkbox,\n    1: setCheck\n  } = useState(false);\n  const {\n    0: time,\n    1: setTime\n  } = useState([]);\n  const {\n    0: location,\n    1: setLocation\n  } = useState(\"/\");\n  const {\n    0: Loggedin,\n    1: setLog\n  } = useState(false);\n  useEffect(() => {\n    if (props.query !== undefined) {\n      if (props.query.ref === \"tokenexpired\") {\n        message.warning('veuillez d abord vous connecter');\n      }\n\n      if (props.query.location !== undefined) {\n        setLocation(props.query.location);\n      }\n    }\n\n    axios.get('/api/profiles/myprofile', {\n      withCredentials: true\n    }).then(res => {\n      setLog(true);\n      setTimeout(() => {\n        window.location.replace(\"/\");\n      }, 5000);\n    }).catch(err => {});\n  }, []); // ----------------------------------------------\n  // methods ------------------------------------------\n\n  const handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setData(_objectSpread(_objectSpread({}, userData), {}, {\n      [name]: value\n    }));\n\n    if (name === \"email\") {\n      setErrEm(false);\n    }\n\n    if (name === \"password\") {\n      setErrPass(false);\n    }\n\n    if (name === \"mobilephone\") {\n      setPhoneErr(false);\n    }\n  };\n\n  const handleConfirmation = e => {\n    setConf(e.target.value);\n    setErrConf(false);\n  };\n\n  const handleTime = (time, timestring) => {\n    const string = timestring;\n    setData(_objectSpread(_objectSpread({}, userData), {}, {\n      horraire: string\n    }));\n    setTime(time);\n    setErrhor(false);\n  };\n\n  const handleTag = value => {\n    const string = value;\n    setData(_objectSpread(_objectSpread({}, userData), {}, {\n      domaine: string\n    }));\n    setErrdom(false);\n  }; // Verifying email if it already exist \n\n\n  const handleSubmit = async e => {\n    setLoading(true);\n    e.preventDefault();\n    var i = 0;\n    const body = {\n      email: userData.email\n    };\n    await axios.post(\"/api/signup/verifEmail\", body).then(response => {\n      if (response.status === 200) {\n        setLoading(false);\n      } else {\n        setLoading(false);\n        setErrEm(true);\n      }\n    }).catch(err => {\n      setLoading(false);\n      i = 1;\n      setErrEm(true);\n      console.log(err);\n    });\n\n    if (userData.password.length < 8) {\n      setErrPass(true);\n      i = 3;\n    }\n\n    if (Confirmation !== userData.password) {\n      setErrConf(true);\n      i = 3;\n    }\n\n    if (i === 0) {\n      setCurrent(2);\n    }\n  };\n\n  const handleSubmit2 = e => {\n    e.preventDefault();\n    const newphone = userData.mobilephone.replace(0, \"+212\");\n    setLoading(true);\n    var hold = false;\n\n    if (userData.domaine.length === 0) {\n      setErrdom(true);\n      hold = true;\n    }\n\n    if (userData.horraire.length === 0) {\n      setErrhor(true);\n      hold = true;\n    }\n\n    var appVerifier = window.recaptchaVerifier;\n\n    if (captchaState) {\n      firebase.auth().signInWithPhoneNumber(newphone, appVerifier).then(function (confirmationResult) {\n        // SMS sent. Prompt user to type the code from the message, then sign the\n        // user in with confirmationResult.confirm(code).\n        if (!hold || userData.type === \"Client\") {\n          setLoading(false);\n          setCurrent(3);\n        }\n\n        window.confirmationResult = confirmationResult; //currentComponent.setState({ submitState: true });\n      }).catch(function (error) {\n        if (error.code !== \"auth/too-many-requests\") {\n          setPhoneErr(true);\n          console.log(error);\n        }\n\n        setLoading(false);\n        setCaptcha(false); // Error; SMS not sent\n\n        if (error.code === \"auth/too-many-requests\") {\n          console.log(error);\n          notification[\"error\"]({\n            message: 'auth / trop de requêtes',\n            description: 'Nous avons bloqué toutes les demandes de cet appareil en raison d une activité inhabituelle. Réessayez plus tard.',\n            duration: 10\n          });\n        }\n      });\n    }\n  };\n\n  const handler = bool => {\n    setCaptcha(bool);\n  };\n\n  const handleLastSubmit = () => {\n    setLoading(true);\n    var code = codeVerif;\n    window.confirmationResult.confirm(code).then(result => {\n      axios.post(\"/api/signup/\", userData, {\n        withCredentials: true\n      }).then(response => {\n        if (response.status === 200) {\n          window.location.replace(`/Settings?location=${location}`);\n        } else {\n          setCurrent(5);\n        }\n      }).catch(err => {\n        console.log(err);\n        setCurrent(5);\n      });\n    }).catch(err => {\n      setLoading(false);\n      setCodeErr(true);\n      console.log(err);\n    });\n  }; // -----------------------------------------------------\n\n\n  return __jsx(\"div\", {\n    className: \"FormContainer\"\n  }, !Loggedin && __jsx(React.Fragment, null, __jsx(\"h1\", null, \"Inscrivez-vous\"), current == 0 && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"h2\", null, \"Choisissez le type de votre compte\"), __jsx(\"form\", {\n    onSubmit: () => setCurrent(1)\n  }, __jsx(\"select\", {\n    className: \"select\",\n    name: \"type\",\n    value: userData.type,\n    onChange: handleChange\n  }, __jsx(\"option\", {\n    value: \"Soci\\xE9t\\xE9\"\n  }, \"Soci\\xE9t\\xE9\"), __jsx(\"option\", {\n    value: \"Client\"\n  }, \"Client\")), __jsx(\"div\", {\n    className: \"buttonContainer\"\n  }, __jsx(\"input\", {\n    className: \"SignButton next\",\n    type: \"submit\",\n    value: \"Suivant\"\n  })))), current == 1 && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"multipleInput\"\n  }, __jsx(\"select\", {\n    className: \"small\",\n    name: \"gender\",\n    value: userData.gender,\n    onChange: handleChange\n  }, __jsx(\"option\", {\n    value: \"male\",\n    selected: true\n  }, \"Mr\"), __jsx(\"option\", {\n    value: \"female\"\n  }, \"Mme\")), __jsx(\"input\", {\n    className: \"input controlled\",\n    type: \"text\",\n    placeholder: \"Nom\",\n    name: \"nom\",\n    onChange: handleChange,\n    value: userData.nom,\n    required: true\n  }), __jsx(\"input\", {\n    className: \"input controlled\",\n    type: \"text\",\n    placeholder: \"Prenom\",\n    name: \"prenom\",\n    onChange: handleChange,\n    value: userData.prenom,\n    required: true\n  })), userData.type === \"Société\" && __jsx(\"div\", {\n    className: \"multipleInput\"\n  }, __jsx(\"select\", {\n    className: \"title\",\n    name: \"title\",\n    value: userData.title,\n    onChange: handleChange,\n    required: true\n  }, Jobs.map(job => __jsx(\"option\", {\n    value: job,\n    key: job\n  }, job))), __jsx(\"div\", {\n    style: {\n      width: '68%',\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"input\", {\n    className: emailErr ? \"email error\" : \"email\",\n    type: \"email\",\n    placeholder: \"Email\",\n    name: \"email\",\n    onChange: handleChange,\n    value: userData.email,\n    required: true\n  }), __jsx(\"label\", {\n    className: emailErr ? \"errMsg\" : \"hidden\"\n  }, \"Email already exist\"))), userData.type === \"Client\" && __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(\"input\", {\n    className: emailErr ? \"input error\" : \"input\",\n    type: \"email\",\n    placeholder: \"Email\",\n    name: \"email\",\n    onChange: handleChange,\n    value: userData.email,\n    required: true\n  }), __jsx(\"label\", {\n    className: emailErr ? \"errMsg\" : \"hidden\"\n  }, \"Email already exist\")), __jsx(\"div\", {\n    className: \"multipleInput\"\n  }, __jsx(\"select\", {\n    className: \"title\",\n    name: \"city\",\n    value: userData.city,\n    onChange: handleChange\n  }, Cities.map(citie => __jsx(\"option\", {\n    value: citie,\n    key: citie\n  }, citie))), __jsx(\"input\", {\n    className: \"input addresse\",\n    type: \"text\",\n    placeholder: \"Addresse\",\n    name: \"addresse\",\n    onChange: handleChange,\n    value: userData.addresse,\n    required: true\n  })), __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(\"input\", {\n    className: passwordErr ? \"input error\" : \"input\",\n    type: \"password\",\n    placeholder: \"Mot de passe\",\n    name: \"password\",\n    onChange: handleChange,\n    value: userData.password,\n    required: true\n  }), __jsx(\"label\", {\n    className: passwordErr ? \"errMsg\" : \"hidden\"\n  }, \"mot de passe doit \\xEAtre d'au moins 8 caract\\xE8res\")), __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(\"input\", {\n    className: confirmpass ? \"input error\" : \"input\",\n    type: \"password\",\n    placeholder: \"Confirmez votre mot de passe\",\n    value: Confirmation,\n    onChange: handleConfirmation,\n    required: true\n  }), __jsx(\"label\", {\n    className: confirmpass ? \"errMsg\" : \"hidden\"\n  }, \"la confirmation n'est pas la m\\xEAme que le mot de passe\")), __jsx(\"div\", {\n    className: \"buttonContainer\"\n  }, !loading && __jsx(\"button\", {\n    className: \"SignButton next\",\n    type: \"submit\"\n  }, \"Suivant\"), loading && __jsx(Spin, {\n    size: \"default\",\n    className: \"next\"\n  }), __jsx(\"input\", {\n    className: \"Back\",\n    type: \"button\",\n    value: \"Precedent\",\n    onClick: () => setCurrent(0)\n  })))), current == 2 && userData.type === \"Société\" && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit2\n  }, __jsx(\"input\", {\n    className: \"input soc\",\n    type: \"text\",\n    placeholder: \"Nom de soci\\xE9t\\xE9\",\n    name: \"companyname\",\n    value: userData.companyname,\n    onChange: handleChange\n  }), __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(Select, {\n    mode: \"tags\",\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Votre domaine \",\n    className: domaineErr ? \"error\" : \"\",\n    onChange: handleTag,\n    value: userData.domaine,\n    maxTagCount: 3\n  }, children), __jsx(\"label\", {\n    className: domaineErr ? \"errMsg\" : \"hidden\"\n  }, \"Ce champ est obligatoire\")), __jsx(\"div\", {\n    className: \"multipleInput two\"\n  }, __jsx(\"div\", {\n    style: {\n      width: '48%',\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"input\", {\n    className: phoneErr ? \"email error\" : \"email\",\n    type: \"tel\",\n    name: \"mobilephone\",\n    placeholder: \"T\\xE9l\\xE9phone mobile | Ex:06xxxxxxxx\",\n    onChange: handleChange,\n    value: userData.mobilephone,\n    required: true\n  }), __jsx(\"label\", {\n    className: phoneErr ? \"errMsg\" : \"hidden\"\n  }, \"Numero invalide\")), __jsx(\"div\", {\n    style: {\n      width: '48%',\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"input\", {\n    className: \"email\",\n    type: \"tel\",\n    name: \"fixphone\",\n    placeholder: \"T\\xE9l\\xE9phone Fix | Ex:05xxxxxxxx\",\n    onChange: handleChange,\n    value: userData.fixphone,\n    required: true\n  }))), __jsx(\"br\", null), __jsx(\"label\", {\n    style: {\n      color: '#318CE7'\n    }\n  }, \"L'horaire de votre soci\\xE9t\\xE9 : \"), __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(RangePicker, {\n    className: horraireErr ? \"error\" : \"\",\n    style: {\n      width: '100%'\n    },\n    bordered: false,\n    format: \"HH:mm\",\n    minuteStep: 30,\n    value: time,\n    onChange: handleTime\n  }), __jsx(\"label\", {\n    className: horraireErr ? \"errMsg\" : \"hidden\"\n  }, \"Ce champ est obligatoire\")), __jsx(Captcha, {\n    handler: handler\n  }), __jsx(\"div\", {\n    className: \"buttonContainer\"\n  }, !loading && __jsx(\"button\", {\n    className: !captchaState ? \"disabeledButton next\" : \"SignButton next\",\n    type: \"submit\"\n  }, \"Suivant\"), loading && __jsx(Spin, {\n    size: \"default\",\n    className: \"next\"\n  }), __jsx(\"input\", {\n    className: \"Back\",\n    type: \"button\",\n    value: \"Precedent\",\n    onClick: () => setCurrent(1)\n  })))), current == 2 && userData.type === \"Client\" && __jsx(\"form\", {\n    onSubmit: handleSubmit2\n  }, __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(\"input\", {\n    className: phoneErr ? \"input error\" : \"input\",\n    type: \"tel\",\n    name: \"mobilephone\",\n    placeholder: \"Mobile .Ex:06xxxxxxxx\",\n    onChange: handleChange,\n    value: userData.mobilephone,\n    required: true\n  }), __jsx(\"label\", {\n    className: phoneErr ? \"errMsg\" : \"hidden\"\n  }, \"Numero invalide\")), __jsx(Captcha, {\n    handler: handler\n  }), __jsx(\"div\", {\n    className: \"buttonContainer\"\n  }, !loading && __jsx(\"button\", {\n    className: !captchaState ? \"disabeledButton next\" : \"SignButton next\",\n    type: \"submit\"\n  }, \"Suivant\"), loading && __jsx(Spin, {\n    size: \"default\",\n    className: \"next\"\n  }), __jsx(\"input\", {\n    className: \"Back\",\n    type: \"button\",\n    value: \"Precedent\",\n    onClick: () => setCurrent(1)\n  }))), current == 3 && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"h3\", null, \"Pour votre s\\xE9curit\\xE9 , on veut s'assurer qu'il s'agit bien de vous . On vous a envoy\\xE9 un message text avec un code de v\\xE9rification a 6 chiffres . Les tarifs standards s'appliquent .\"), __jsx(\"form\", {\n    onSubmit: e => e.preventDefault()\n  }, __jsx(\"div\", {\n    className: \"ColumnFLexContainer\"\n  }, __jsx(\"input\", {\n    className: codeErr ? \"input error\" : \"input\",\n    type: \"text\",\n    placeholder: \"Code de verification\",\n    required: true,\n    onChange: e => {\n      setCode(e.target.value);\n      ;\n      setCodeErr(false);\n    }\n  }), __jsx(\"label\", {\n    className: codeErr ? \"errMsg\" : \"hidden\"\n  }, \"Code invalid\")), __jsx(\"div\", {\n    className: \"multipleInput two\",\n    style: {\n      marginTop: '25px'\n    }\n  }, __jsx(\"input\", {\n    className: \"\",\n    type: \"checkbox\",\n    required: true,\n    checked: checkbox,\n    onChange: e => {\n      setCheck(e.target.checked);\n    }\n  }), __jsx(\"label\", {\n    style: {\n      marginLeft: '25px'\n    }\n  }, \"La cr\\xE9ation d'un compte signifie que vous \\xE9tes d'accord avec nos \", __jsx(\"a\", {\n    onClick: () => setTerms(true),\n    target: \"_blank\"\n  }, \"Conditions d'utilisation\"), \", notre \", __jsx(\"a\", {\n    onClick: () => setPrivacy(true),\n    target: \"_black\"\n  }, \"politique de confidentialit\\xE9\"), \" et nos param\\xE8tres de notification par defaut\")), __jsx(Modal, {\n    title: \"\",\n    visible: terms,\n    width: \"90%\",\n    bodyStyle: {\n      height: '70vh',\n      overflowY: 'scroll'\n    },\n    onCancel: () => setTerms(false),\n    footer: null\n  }, __jsx(Terms, null)), __jsx(Modal, {\n    title: \"\",\n    visible: privacy,\n    width: \"90%\",\n    bodyStyle: {\n      height: '70vh',\n      overflowY: 'scroll'\n    },\n    onCancel: () => setPrivacy(false),\n    footer: null\n  }, __jsx(Privacy, null)), __jsx(\"div\", {\n    className: \"buttonContainer\"\n  }, !loading && __jsx(\"button\", {\n    className: codeVerif.length !== 6 || !checkbox ? \"disabeledButton next\" : \"SignButton next\",\n    type: \"submit\",\n    disabled: codeVerif.length !== 6 || !checkbox,\n    onClick: handleLastSubmit\n  }, \"Suivant\"), loading && __jsx(Spin, {\n    size: \"default\",\n    className: \"next\"\n  }), __jsx(\"input\", {\n    className: \"Back\",\n    type: \"button\",\n    value: \"Precedent\",\n    onClick: () => {\n      setCurrent(2), setCaptcha(false);\n    }\n  })))), current == 5 && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"h3\", null, \"Smthng went wrong \\uD83D\\uDE12\\uD83D\\uDE12 \")), __jsx(\"div\", {\n    className: \"FormFooter\"\n  }, __jsx(\"span\", null, \"D\\xE9j\\xE0 membre ?\"), __jsx(Link, {\n    href: \"Signin\"\n  }, __jsx(\"a\", null, \"Connectez-vous\")))), Loggedin && __jsx(\"div\", {\n    className: \"part 1\"\n  }, __jsx(\"h2\", null, \"Nous saluons le retour!\"), __jsx(\"p\", null, \"Vous \\xEAtes d\\xE9j\\xE0 connect\\xE9 et serez bient\\xF4t redirig\\xE9 vers page d'accueil.\"), __jsx(\"div\", {\n    className: \"FormFooter\"\n  }, \"Si vous n'\\xEAtes pas redirig\\xE9 automatiquement suivez\", __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"ce lien\")))));\n};\n\nexport default FormComponent;","map":null,"metadata":{},"sourceType":"module"}