{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport moment from 'moment';\nimport { appointments } from './appointments';\nvar currentDate = moment();\nvar date = currentDate.date();\n\nvar makeTodayAppointment = function makeTodayAppointment(startDate, endDate) {\n  var days = moment(startDate).diff(endDate, 'days');\n  var nextStartDate = moment(startDate).year(currentDate.year()).month(currentDate.month()).date(date);\n  var nextEndDate = moment(endDate).year(currentDate.year()).month(currentDate.month()).date(date + days);\n  return {\n    startDate: nextStartDate.toDate(),\n    endDate: nextEndDate.toDate()\n  };\n};\n\nexport default _c2 = appointments.map(_c = function _c(_ref) {\n  var startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      restArgs = _objectWithoutProperties(_ref, [\"startDate\", \"endDate\"]);\n\n  var result = _objectSpread(_objectSpread({}, makeTodayAppointment(startDate, endDate)), restArgs);\n\n  date += 1;\n  if (date > 31) date = 1;\n  return result;\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$appointments.map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Noumane agouzil/Desktop/Normane/My projects/PfeProject/Front-End/pages/test/Components/Today-appointments.js"],"names":["moment","appointments","currentDate","date","makeTodayAppointment","startDate","endDate","days","diff","nextStartDate","year","month","nextEndDate","toDate","map","restArgs","result"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,IAAMC,WAAW,GAAGF,MAAM,EAA1B;AACA,IAAIG,IAAI,GAAGD,WAAW,CAACC,IAAZ,EAAX;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,SAAD,EAAYC,OAAZ,EAAwB;AACnD,MAAMC,IAAI,GAAGP,MAAM,CAACK,SAAD,CAAN,CAAkBG,IAAlB,CAAuBF,OAAvB,EAAgC,MAAhC,CAAb;AACA,MAAMG,aAAa,GAAGT,MAAM,CAACK,SAAD,CAAN,CACnBK,IADmB,CACdR,WAAW,CAACQ,IAAZ,EADc,EAEnBC,KAFmB,CAEbT,WAAW,CAACS,KAAZ,EAFa,EAGnBR,IAHmB,CAGdA,IAHc,CAAtB;AAIA,MAAMS,WAAW,GAAGZ,MAAM,CAACM,OAAD,CAAN,CACjBI,IADiB,CACZR,WAAW,CAACQ,IAAZ,EADY,EAEjBC,KAFiB,CAEXT,WAAW,CAACS,KAAZ,EAFW,EAGjBR,IAHiB,CAGZA,IAAI,GAAGI,IAHK,CAApB;AAKA,SAAO;AACLF,IAAAA,SAAS,EAAEI,aAAa,CAACI,MAAd,EADN;AAELP,IAAAA,OAAO,EAAEM,WAAW,CAACC,MAAZ;AAFJ,GAAP;AAID,CAfD;;AAiBA,qBAAeZ,YAAY,CAACa,GAAb,MAAiB,kBAAyC;AAAA,MAAtCT,SAAsC,QAAtCA,SAAsC;AAAA,MAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,MAAfS,QAAe;;AACvE,MAAMC,MAAM,mCACPZ,oBAAoB,CAACC,SAAD,EAAYC,OAAZ,CADb,GAEPS,QAFO,CAAZ;;AAIAZ,EAAAA,IAAI,IAAI,CAAR;AACA,MAAIA,IAAI,GAAG,EAAX,EAAeA,IAAI,GAAG,CAAP;AACf,SAAOa,MAAP;AACD,CARc,CAAf","sourcesContent":["import moment from 'moment';\r\nimport { appointments } from './appointments';\r\n\r\nconst currentDate = moment();\r\nlet date = currentDate.date();\r\n\r\nconst makeTodayAppointment = (startDate, endDate) => {\r\n  const days = moment(startDate).diff(endDate, 'days');\r\n  const nextStartDate = moment(startDate)\r\n    .year(currentDate.year())\r\n    .month(currentDate.month())\r\n    .date(date);\r\n  const nextEndDate = moment(endDate)\r\n    .year(currentDate.year())\r\n    .month(currentDate.month())\r\n    .date(date + days);\r\n\r\n  return {\r\n    startDate: nextStartDate.toDate(),\r\n    endDate: nextEndDate.toDate(),\r\n  };\r\n};\r\n\r\nexport default appointments.map(({ startDate, endDate, ...restArgs }) => {\r\n  const result = {\r\n    ...makeTodayAppointment(startDate, endDate),\r\n    ...restArgs,\r\n  };\r\n  date += 1;\r\n  if (date > 31) date = 1;\r\n  return result;\r\n});\r\n"]},"metadata":{},"sourceType":"module"}